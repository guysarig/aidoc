name: Build and Test

on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Add your build and test steps here
      - name: Run test stage
        run: echo "Running test stage"

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install --update

      - name: Configure AWS CLI
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set region $AWS_REGION

      - name: Check for Python changes
        id: check_python_changes
        run: |
            set -e
            if git rev-parse HEAD~1 >/dev/null 2>&1; then
              CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '\.py$' || true)
            else
              CHANGED_FILES=$(git diff --name-only HEAD | grep '\.py$' || true)
            fi
            echo "Changed files: $CHANGED_FILES"
            if [ -n "$CHANGED_FILES" ]; then
              echo "Python code has changed."
              echo "::set-output name=python_changed::true"
            else
              echo "No changes in Python code."
              echo "::set-output name=python_changed::false"
            fi

      - name: Run Python tests
        if: steps.check_python_changes.outputs.python_changed == 'true'
        id: run_python_tests
        run: |
          source helper_scripts/setup_venv.sh
          sh helper_scripts/run_code_test.sh source/lambdafunctions order_verification

      - name: Build Lambda payload
        if: steps.check_python_changes.outputs.python_changed == 'true' && steps.run_python_tests.conclusion == 'success'
        run: |
          sh create_tf_backend_destinations.sh
          echo "Lambda payloads built successfully."

      - name: Install Terraform
        run: |
            curl -LO https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
            unzip terraform_1.5.0_linux_amd64.zip
            sudo mv terraform /usr/local/bin/
            terraform -v

      - name: Plan infrastructure
        run: |
          cd iac
          terraform init
          terraform plan -out=tfplan
          cd ..